{"version":3,"sources":["n1-main/m1-ui/PacksList/PacksList.module.scss","n1-main/m1-ui/Login/Login.module.scss","n1-main/m1-ui/Registration/Register.module.scss","n1-main/m1-ui/Profile/PersonalInfo/PersonalInfo.module.scss","n1-main/m1-ui/RestorePassword/RestorePassword.module.scss","n1-main/m1-ui/HeaderMain/HeaderMain.module.scss","n1-main/m1-ui/NewPassword/NewPassword.module.scss","n1-main/m1-ui/CardsList/CardsList.module.scss","n1-main/m1-ui/common/Paginator/Paginator.module.scss","n1-main/m1-ui/CheckPassword/CheckPassword.module.scss","n1-main/m1-ui/CardsList/TableCards/TableDataCards/TableDataCards.module.scss","n1-main/m1-ui/Profile/UserInfo/UserInfo.module.scss","n1-main/m1-ui/PacksList/TablePacks/TableDataPacks/TableDataPacks.module.scss","n1-main/m1-ui/common/SuperInput/SuperInputText.module.scss","n1-main/m1-ui/Profile/Profile.module.scss","n1-main/m1-ui/PacksList/TablePacks/TablePacks.module.scss","n1-main/m1-ui/CardsList/TableCards/TableCards.module.scss","n1-main/m1-ui/common/SuperButton/SuperButton.module.css","n1-main/m1-ui/Profile/UserInfoCards/UserInfoCards.module.scss","n1-main/m1-ui/TestComponents/TestComponents.module.css","n1-main/m1-ui/common/SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/CardsList/TableCards/TableHeaderCards/TableHeaderCards.module.scss","n1-main/m1-ui/common/preloader/Preloader.module.scss","n1-main/m1-ui/PacksList/TablePacks/TableHeaderPacks/TableHeaderPacks.module.scss","n1-main/m1-ui/PacksList/DoubleRange/DoubleRange.module.scss","reportWebVitals.ts","n1-main/m3-dal/apiLogin.ts","n1-main/m3-dal/apiProfile.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m3-dal/apiRegister.ts","n1-main/m2-bll/registerReducer.ts","n1-main/m2-bll/authReducer.ts","n1-main/m3-dal/apiRestore.ts","n1-main/m2-bll/restorePasswordReducer.ts","n1-main/m3-dal/apiPacks.ts","n1-main/m2-bll/packsReducer.ts","n1-main/m3-dal/apiCards.ts","n1-main/m2-bll/cardsReducer.ts","n1-main/m2-bll/store.ts","n1-main/m1-ui/common/SuperInput/SuperInputText.tsx","n1-main/m1-ui/common/SuperButton/SuperButton.tsx","assets/images/eye.svg","assets/images/closedEye.svg","n1-main/m1-ui/common/preloader/Preloader.tsx","n1-main/m1-ui/Login/Login.tsx","assets/images/avatar.png","n1-main/m1-ui/Profile/UserInfo/UserInfo.tsx","n1-main/m1-ui/Profile/UserInfoCards/UserInfoCards.tsx","n1-main/m1-ui/Profile/Profile.tsx","n1-main/m1-ui/PageNotFound/PageNotFound.tsx","assets/images/letter.svg","n1-main/m1-ui/CheckPassword/CheckPassword.tsx","n1-main/m1-ui/RestorePassword/RestorePassword.tsx","n1-main/m1-ui/NewPassword/NewPassword.tsx","n1-main/m1-ui/common/SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/TestComponents/TestComponents.tsx","n1-main/m1-ui/Profile/PersonalInfo/PersonalInfo.tsx","n1-main/m1-ui/Registration/Register.tsx","n1-main/m1-ui/HeaderMain/HeaderMain.tsx","assets/images/DownSort.svg","assets/images/UpSort.svg","n1-main/m1-ui/PacksList/TablePacks/TableHeaderPacks/TableHeaderPacks.tsx","n1-main/m1-ui/PacksList/TablePacks/TableDataPacks/TableDataPacks.tsx","n1-main/m1-ui/PacksList/TablePacks/TablePacks.tsx","n1-main/m1-ui/common/Search/Search.tsx","n1-main/m1-ui/common/SuperDoubleRange/SuperDoubleRange.tsx","n1-main/m1-ui/PacksList/DoubleRange/DoubleRange.tsx","n1-main/m1-ui/common/SuperSelect/SuperSelect.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n1-main/m1-ui/PacksList/PacksList.tsx","n1-main/m1-ui/CardsList/TableCards/TableHeaderCards/TableHeaderCards.tsx","n1-main/m1-ui/CardsList/TableCards/TableDataCards/TableDataCards.tsx","n1-main/m1-ui/CardsList/TableCards/TableCards.tsx","assets/images/LeftArrow.svg","n1-main/m1-ui/CardsList/CardsList.tsx","n1-main/App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","axiosInstance","profileApi","name","avatar","put","initialState","informationAboutUser","_id","email","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","error","setInformationAboutUserAC","type","ApiRegister","password","REGISTER_LOADING","REGISTER_ERROR","REGISTER_SUCCESS","registerInitialState","isRegistered","isFetching","setRegisterError","setRegisterLoading","isLoggedIn","setIsLoggedInAC","value","setLoginError","setLoginLoading","isLoggedInApp","dispatch","res","catch","e","response","messages","finally","authApi","message","resetPasswordToken","setShowEmailCheck","showEmailCheck","payload","setRestorePasswordError","setRestorePasswordLoading","isNewPasswordCreated","packsApi","packName","min","max","sortPacks","page","pageCount","user_id","get","params","isPrivate","cardsPack","packId","cardPacks","cardPacksRequestParameters","maxCardsCount","minCardsCount","cardPacksTotalCount","setUpdatedDirection","direction","setCardsCountDirection","setLoadingPacks","setUserId","userId","getDataPacks","getState","a","packs","dataPacks","console","log","cardsApi","cardsPack_id","cardQuestion","sortCards","question","answer","card","cardId","cards","cardsRequestParameters","cardsTotalCount","cardPackName","currentPackUserId","setSearchName","requestedName","getDataCards","dataCards","rootReducer","combineReducers","auth","state","action","profile","updatedUser","restorePassword","register","requestedPage","count","range","id","store","createStore","applyMiddleware","thunk","window","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","currentTarget","key","map","err","SuperButton","red","finalClassName","default","Preloader","cls","loader","Login","useDispatch","useSelector","useState","setType","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","to","PATH","PROFILE","loginContainer","title","subtitle","handleSubmit","titleEmail","inputContainer","getFieldProps","inputEmailPassword","onClick","touched","style","color","match","titlePassword","eye","src","closedEye","alt","checkbox","buttonContainer","button","newAccount","signUp","UserInfo","infoUser","userPhoto","defaultAvatar","userName","editProfileWrapper","UserInfoCards","infoUserCards","userCards","Profile","useEffect","LOGIN","profileContainer","info","PageNotFound","pageNotFoundContainer","CheckPassword","checkPasswordContainer","imgContainer","letter","firstNote","secondNote","RestorePassword","restorePasswordContainer","inputEmail","placeholder","reLogin","NewPassword","token","useParams","newPasswordContainer","inputPassword","margin","note","SuperCheckbox","onChangeChecked","children","checked","TestComponents","testComponentsContainer","componentsContainer","PersonalInfo","history","useHistory","ava","setAva","nickname","setNickname","infoContainer","imgWrapper","inputNicknameAvatar","cancelButton","push","registerButton","editUserProfileTC","Register","confirmPassword","changeTypeHandler","registrationContainer","HeaderMain","active","finalClass","setFinalClass","location","useLocation","headerContainer","wrapper","logo","linksContainer","linkContainer","PACKS_LIST","pathname","onMouseEnter","onMouseOut","tabIndex","logoutBtn","TableHeaderPacks","cardsArrow","setCardsArrow","updatedArrow","setUpdatedArrow","tableHeader","downArrow","upArrow","TableDataPacks","cardsCount","updatedDate","updatedTime","removePack","appUserId","createdBy","editPackHandler","tableData","buttonsContainer","deleteButton","disabled","editButton","TablePacks","packsData","isFetchingPacks","tableContainer","pack","slice","user_name","noPacksTitle","Search","handlePressSearch","request","setRequest","Slider","require","Range","createSliderWithTooltip","SuperDoubleRange","onChangeRange","onAfterChange","step","included","handleStyle","trackStyle","railStyle","dotStyle","activeDotStyle","DoubleRange","setMin","setMax","borderColor","backgroundColor","width","styles","rangeContainer","SuperSelect","options","onChangeOption","mappedOptions","o","i","Paginator","itemsTotalCount","changePageCount","onPageChanges","paginatorPage","Math","ceil","marginPagesDisplayed","pageRangeDisplayed","previousLabel","previousClassName","prev","nextLabel","nextClassName","next","activeClassName","selectedPage","onPageChange","selected","containerClassName","container","pageClassName","sortContainer","superSelect","PacksList","updatedDirection","currentUserId","minCards","maxCards","activeClass","setActiveClass","buttonName","setButtonName","addPack","useCallback","newPackName","prompt","editPack","deletePack","getMyPacksList","getAllPacksList","onPacksPageChanges","changePacksPageCount","setPageCount","blur","packlistContainer","ownerTitle","myButton","allButton","numberTitle","packslist","packslistTitle","search_AddButtonContainer","search","addButtonContainer","addPackButton","TableHeaderCards","gridChangeClass","TableDataCards","grade","removeCard","card_id","editCardHandler","TableCards","cardsData","noCardsTitle","CardsList","searchQuestion","setPackId","onCardsPageChanges","changeCardsPageCount","addCardHandler","newCardQuestion","newCardAnswer","editCard","deleteCard","cardslistContainer","cardslist","arrowTitleContainer","arrow","cardslistTitle","CARDS_LIST","USER_INFO","REGISTRATION","TEST_COMPONENTS","PAGE_NOT_FOUND","RESTORE_PASSWORD","NEW_PASSWORD","App","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e908bfa0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"packlistContainer\":\"PacksList_packlistContainer__203H9\",\"card\":\"PacksList_card__4iZ9t\",\"info\":\"PacksList_info__1gH48\",\"ownerTitle\":\"PacksList_ownerTitle__G6PSA\",\"buttonsContainer\":\"PacksList_buttonsContainer__cNOXd\",\"active\":\"PacksList_active__2VHiG\",\"myButton\":\"PacksList_myButton__35CDO\",\"allButton\":\"PacksList_allButton__2ktB-\",\"numberTitle\":\"PacksList_numberTitle__1p9tV\",\"packslist\":\"PacksList_packslist__3okA6\",\"packslistTitle\":\"PacksList_packslistTitle__1aQ_O\",\"search_AddButtonContainer\":\"PacksList_search_AddButtonContainer__P3a5F\",\"search\":\"PacksList_search__uEFwQ\",\"addButtonContainer\":\"PacksList_addButtonContainer__2L2UU\",\"addPackButton\":\"PacksList_addPackButton__37DlD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1SVOg\",\"card\":\"Login_card__2mLHC\",\"title\":\"Login_title__2UUgW\",\"subtitle\":\"Login_subtitle__DbChu\",\"titleEmail\":\"Login_titleEmail__1iUd3\",\"titlePassword\":\"Login_titlePassword__3ZnqY\",\"inputContainer\":\"Login_inputContainer__JcY_7\",\"eye\":\"Login_eye__1spUq\",\"inputEmailPassword\":\"Login_inputEmailPassword__20Vs6\",\"checkbox\":\"Login_checkbox__2J4mn\",\"rememberMe\":\"Login_rememberMe__3YBcc\",\"restorePassword\":\"Login_restorePassword__PgDBI\",\"buttonContainer\":\"Login_buttonContainer__1lcN7\",\"button\":\"Login_button__2_yDM\",\"newAccount\":\"Login_newAccount__3CJO5\",\"signUp\":\"Login_signUp__2tk-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationContainer\":\"Register_registrationContainer__UmmAC\",\"card\":\"Register_card___EsZn\",\"title\":\"Register_title__27VHU\",\"subtitle\":\"Register_subtitle__3mACY\",\"titleEmail\":\"Register_titleEmail__2SneJ\",\"titlePassword\":\"Register_titlePassword__eIshG\",\"inputContainer\":\"Register_inputContainer__1dcrn\",\"eye\":\"Register_eye__JXYXU\",\"inputEmailPassword\":\"Register_inputEmailPassword__1lV5L\",\"buttonContainer\":\"Register_buttonContainer__37yYJ\",\"cancelButton\":\"Register_cancelButton__Kmh2o\",\"registerButton\":\"Register_registerButton__EbWTP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoContainer\":\"PersonalInfo_infoContainer__2OKjr\",\"card\":\"PersonalInfo_card__3lzkm\",\"title\":\"PersonalInfo_title__1HxQO\",\"imgWrapper\":\"PersonalInfo_imgWrapper__1_NOT\",\"inputContainer\":\"PersonalInfo_inputContainer__20Xds\",\"inputNicknameAvatar\":\"PersonalInfo_inputNicknameAvatar__3kz6z\",\"buttonContainer\":\"PersonalInfo_buttonContainer__2JFke\",\"cancelButton\":\"PersonalInfo_cancelButton__1Goa2\",\"registerButton\":\"PersonalInfo_registerButton__2k6O8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePasswordContainer\":\"RestorePassword_restorePasswordContainer__3wwbJ\",\"card\":\"RestorePassword_card__13eXp\",\"title\":\"RestorePassword_title__7T_Sc\",\"subtitle\":\"RestorePassword_subtitle__6udjQ\",\"inputContainer\":\"RestorePassword_inputContainer__25m67\",\"inputEmail\":\"RestorePassword_inputEmail__2h3fP\",\"firstNote\":\"RestorePassword_firstNote__dHJA8\",\"buttonContainer\":\"RestorePassword_buttonContainer__6b9Rc\",\"button\":\"RestorePassword_button__3OtoL\",\"secondNote\":\"RestorePassword_secondNote__u33ED\",\"reLogin\":\"RestorePassword_reLogin__115Di\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"HeaderMain_headerContainer__1t0Yy\",\"wrapper\":\"HeaderMain_wrapper__x0UjY\",\"logo\":\"HeaderMain_logo__2dm-D\",\"linksContainer\":\"HeaderMain_linksContainer__2Nnya\",\"linkContainer\":\"HeaderMain_linkContainer__25SoB\",\"active\":\"HeaderMain_active__3RSCn\",\"buttonContainer\":\"HeaderMain_buttonContainer__2FGST\",\"logoutBtn\":\"HeaderMain_logoutBtn__3iDpb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPasswordContainer\":\"NewPassword_newPasswordContainer__2W262\",\"card\":\"NewPassword_card__2STyj\",\"title\":\"NewPassword_title__3MrsO\",\"subtitle\":\"NewPassword_subtitle__xymY6\",\"inputContainer\":\"NewPassword_inputContainer__aG24R\",\"eye\":\"NewPassword_eye__3Nt59\",\"inputPassword\":\"NewPassword_inputPassword__1jwIk\",\"note\":\"NewPassword_note__3Are5\",\"buttonContainer\":\"NewPassword_buttonContainer__3DPdQ\",\"button\":\"NewPassword_button__3-ZIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardslistContainer\":\"CardsList_cardslistContainer__2tYhG\",\"card\":\"CardsList_card__3QmT-\",\"cardslist\":\"CardsList_cardslist__2W4xR\",\"arrowTitleContainer\":\"CardsList_arrowTitleContainer__1-CIA\",\"arrow\":\"CardsList_arrow__ojaGm\",\"cardslistTitle\":\"CardsList_cardslistTitle__3lYqw\",\"search_AddButtonContainer\":\"CardsList_search_AddButtonContainer__274tP\",\"search\":\"CardsList_search__3Sgln\",\"addButtonContainer\":\"CardsList_addButtonContainer__3kBXn\",\"addPackButton\":\"CardsList_addPackButton__1ckgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorPage\":\"Paginator_paginatorPage__29P5R\",\"container\":\"Paginator_container__3WYVr\",\"selectedPage\":\"Paginator_selectedPage__1_Qpu\",\"page\":\"Paginator_page__nOPpU\",\"prev\":\"Paginator_prev__2zF4J\",\"next\":\"Paginator_next__3k4_a\",\"sortContainer\":\"Paginator_sortContainer__1n5To\",\"superSelect\":\"Paginator_superSelect__1apV2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkPasswordContainer\":\"CheckPassword_checkPasswordContainer__1ni7O\",\"card\":\"CheckPassword_card__rQtwW\",\"title\":\"CheckPassword_title__3hHul\",\"imgContainer\":\"CheckPassword_imgContainer__tY4ua\",\"subtitle\":\"CheckPassword_subtitle__1yJNt\",\"firstNote\":\"CheckPassword_firstNote__2Ezf9\",\"secondNote\":\"CheckPassword_secondNote__1FTG7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableData\":\"TableDataCards_tableData__XNPX-\",\"buttonsContainer\":\"TableDataCards_buttonsContainer__2Rw0P\",\"deleteButton\":\"TableDataCards_deleteButton__3uPNP\",\"editButton\":\"TableDataCards_editButton__2HexG\",\"gridChangeClass\":\"TableDataCards_gridChangeClass__1k7s6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoUser\":\"UserInfo_infoUser__2-Ur5\",\"userName\":\"UserInfo_userName__20AlV\",\"editProfileWrapper\":\"UserInfo_editProfileWrapper__Sm275\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableData\":\"TableDataPacks_tableData__28j54\",\"buttonsContainer\":\"TableDataPacks_buttonsContainer__2n0e9\",\"deleteButton\":\"TableDataPacks_deleteButton__1dE5S\",\"editButton\":\"TableDataPacks_editButton__3JRQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"SuperInputText_errorInput__1s9vg\",\"error\":\"SuperInputText_error__1BK8m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__17JgP\",\"card\":\"Profile_card__1gvrl\",\"info\":\"Profile_info__2n02S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"TablePacks_tableContainer__TurzH\",\"tableHeader\":\"TablePacks_tableHeader__1CXws\",\"noPacksTitle\":\"TablePacks_noPacksTitle__1pIBz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"TableCards_tableContainer__1_7bh\",\"tableHeader\":\"TableCards_tableHeader__3Tw_Y\",\"noCardsTitle\":\"TableCards_noCardsTitle__gwifg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2WNQ6\",\"red\":\"SuperButton_red__1si2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoUserCards\":\"UserInfoCards_infoUserCards__1JTR6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testComponentsContainer\":\"TestComponents_testComponentsContainer__2JwAI\",\"componentsContainer\":\"TestComponents_componentsContainer__1m_9P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2drz_\",\"spanClassName\":\"SuperCheckbox_spanClassName__3LAnk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHeader\":\"TableHeaderCards_tableHeader__16aLi\",\"gridChangeClass\":\"TableHeaderCards_gridChangeClass__zRRr8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__6QB1q\",\"load7\":\"Preloader_load7__2zpZX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHeader\":\"TableHeaderPacks_tableHeader__17xMQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeContainer\":\"DoubleRange_rangeContainer__F34VD\",\"numberTitle\":\"DoubleRange_numberTitle__jl1cZ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\nimport {DefaultResponseType} from \"./apiRestore\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n});\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginResponseType>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<DefaultResponseType>(\"auth/me\")\r\n    },\r\n    isAuthorized () {\r\n        return instance.post<LoginResponseType>(\"auth/me\",{})\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: DateConstructor\r\n    updated: DateConstructor\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n","import axios from 'axios'\r\nimport {LoginResponseType} from \"./apiLogin\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\n//api types\r\n\r\nexport const profileApi = {\r\n    editUserNameAvatar(name: string, avatar: string) {\r\n        return axiosInstance.put<{updatedUser: LoginResponseType}>('/auth/me', {\r\n            name,\r\n            avatar\r\n        })\r\n    }\r\n\r\n}","import {LoginResponseType} from \"../m3-dal/apiLogin\";\r\nimport {AppThunkType} from \"./store\";\r\nimport {profileApi} from \"../m3-dal/apiProfile\";\r\nimport {setLoginLoading} from \"./authReducer\";\r\n\r\ntype InitialStateType = {\r\n    informationAboutUser: LoginResponseType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    informationAboutUser: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        publicCardPacksCount: 0,\r\n        created: Date,\r\n        updated: Date,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        avatar: \"\",\r\n        error: \"\"\r\n    }\r\n}\r\n\r\n/*export type LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}*/\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'profile/SET-INFORMATION-ABOUT-USER':\r\n            return {...state, informationAboutUser: action.data}\r\n        case \"profile/SET-UPDATED-USER\":\r\n            return {...state, informationAboutUser: action.updatedUser}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInformationAboutUserAC = (data: LoginResponseType) =>\r\n    ({type: 'profile/SET-INFORMATION-ABOUT-USER', data} as const)\r\n\r\nexport const setUpdatedUserAC = (updatedUser: LoginResponseType) =>\r\n    ({type: 'profile/SET-UPDATED-USER', updatedUser} as const)\r\n\r\n\r\nexport const editUserProfileTC = (name: string, avatar: string): AppThunkType => (dispatch) => {\r\n    dispatch(setLoginLoading(true))\r\n    profileApi.editUserNameAvatar(name, avatar)\r\n        .then(res => {\r\n            dispatch(setUpdatedUserAC(res.data.updatedUser))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ?\r\n                err.response.data.error\r\n                :\r\n                (err.message + ', more details in the console')\r\n            console.log(`error: ${error}`)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setLoginLoading(false))\r\n        })\r\n}\r\n\r\nexport type ProfileActionsType = ReturnType<typeof setInformationAboutUserAC | typeof setUpdatedUserAC>","import axios from 'axios'\r\n\r\nexport interface IRegisterData {\r\n  addedUser: {},\r\n  error?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n  // baseURL: \"http://localhost:7542/2.0/\",\r\n  baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n  withCredentials: true,\r\n\r\n})\r\n\r\nexport const ApiRegister = {\r\n  register(email: string, password: string) {\r\n    return instance.post<IRegisterData>(`auth/register`, {email, password})\r\n  },\r\n}\r\n","import { ApiRegister } from '../m3-dal/apiRegister'\r\nimport { AppThunkType } from './store'\r\n\r\nexport const REGISTER_LOADING = 'REGISTER/LOADING'\r\nexport const REGISTER_ERROR = 'REGISTER/ERROR'\r\nexport const REGISTER_SUCCESS = 'REGISTER/SUCCESS'\r\n\r\ntype InitialStateType = {\r\n  isRegistered: boolean,\r\n  error: string | null,\r\n  isFetching: boolean\r\n}\r\n\r\nexport const registerInitialState: InitialStateType = {\r\n  isRegistered: false,\r\n  error: null,\r\n  isFetching: false,\r\n}\r\n\r\n\r\nexport type RegisterActions = ReturnType<typeof setRegisterSuccess\r\n  | typeof setRegisterError\r\n  | typeof setRegisterLoading>;\r\n\r\nexport const setRegisterSuccess = (isRegistered: boolean) => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n    isRegistered,\r\n  } as const\r\n}\r\n\r\nexport const setRegisterError = (error: string | null) => {\r\n  return {\r\n    type: REGISTER_ERROR,\r\n    error,\r\n  } as const\r\n}\r\n\r\nexport const setRegisterLoading = (isFetching: boolean) => {\r\n  return {\r\n    type: REGISTER_LOADING,\r\n    isFetching,\r\n  } as const\r\n}\r\n\r\nexport const registerReducer = (state = registerInitialState, action: RegisterActions): InitialStateType => {\r\n  switch (action.type) {\r\n    case REGISTER_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isRegistered: action.isRegistered,\r\n      }\r\n    }\r\n    case REGISTER_ERROR: {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      }\r\n    }\r\n    case REGISTER_LOADING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n    }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const register =\r\n  (email: string, password: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setRegisterLoading(true))\r\n    try {\r\n      await ApiRegister.register(email, password)\r\n      dispatch(setRegisterSuccess(true))\r\n    } catch (e) {\r\n      const error = e.response.data.error\r\n      dispatch(setRegisterError(error))\r\n    }\r\n    finally {\r\n      dispatch(setRegisterLoading(false))\r\n    }\r\n  }","import {authAPI, LoginParamsType} from \"../m3-dal/apiLogin\";\r\nimport {setInformationAboutUserAC} from \"./profileReducer\";\r\nimport {AppThunkType} from \"./store\";\r\nimport {REGISTER_ERROR, REGISTER_LOADING} from \"./registerReducer\";\r\n\r\ntype InitialStateType = {\r\n    isFetching: boolean\r\n    isLoggedIn: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isFetching: false,\r\n    isLoggedIn: false,\r\n    error: null\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const setIsLoggedOutAC = (value: boolean) =>\r\n    ({type: 'logout/SET-IS-LOGGED-OUT', value} as const)\r\n\r\nexport const setLoginError = (error: string | null) => {\r\n    return {\r\n        type: REGISTER_ERROR,\r\n        error,\r\n    } as const\r\n}\r\n\r\nexport const setLoginLoading = (isFetching: boolean) => {\r\n    return {\r\n        type: REGISTER_LOADING,\r\n        isFetching,\r\n    } as const\r\n}\r\n\r\n//reducer\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n        case 'logout/SET-IS-LOGGED-OUT':\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"REGISTER/ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"REGISTER/LOADING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunkType => (dispatch) => {\r\n    dispatch(setLoginLoading(true))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setInformationAboutUserAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.messages + ', more details in the console')\r\n            dispatch(setLoginError(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setLoginLoading(false))\r\n        })\r\n}\r\n\r\nexport const logoutTC = (): AppThunkType => (dispatch) => {\r\n    dispatch(setLoginLoading(true))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoggedOutAC(false))\r\n            dispatch(setLoginError(\"logout\"))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.messages + ', more details in the console')\r\n        })\r\n        .finally(() => {\r\n            dispatch(setLoginLoading(false))\r\n        })\r\n}\r\n\r\nexport const isLoggedInApp = (): AppThunkType => (dispatch) => {\r\n    dispatch(setLoginLoading(true))\r\n    authAPI.isAuthorized()\r\n        .then(res => {\r\n            dispatch(setInformationAboutUserAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.messages + ', more details in the console')\r\n            dispatch(setLoginError(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setLoginLoading(false))\r\n        })\r\n}\r\n\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC\r\n    | typeof setInformationAboutUserAC\r\n    | typeof setIsLoggedOutAC\r\n    | typeof setLoginError\r\n    | typeof setLoginLoading\r\n    > // изменили запись в одну строчку !!","import axios from 'axios'\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\n//api types\r\n\r\nexport type DefaultResponseType = {\r\n    info: string\r\n    error: string | null\r\n}\r\n\r\nlet backGroundColor = \"linear-gradient(180deg, #E6D4DE 0%, #9890C7 100%)\"\r\n\r\nexport const authApi = {\r\n    restorePassword(email: string) {\r\n        return axiosInstance.post<DefaultResponseType>('/auth/forgot', {\r\n            email,\r\n            message: `<div style='background: ${backGroundColor}; padding: 15px'>\r\n                      <p>To restore your password, follow the link below</p>\r\n                      <a href='https://georgeusynin.github.io/cards-react-redux/#/new_password/$token$'>Restore link</a>\r\n                      </div>`\r\n        })\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return axiosInstance.post<DefaultResponseType>('/auth/set-new-password', {\r\n            password,\r\n            resetPasswordToken\r\n        })\r\n    }\r\n}","//types\r\n\r\nimport {AppThunkType} from \"./store\";\r\nimport {authApi} from \"../m3-dal/apiRestore\";\r\n\r\ntype InitialStateType = {\r\n    showEmailCheck: boolean\r\n    error: string | null\r\n    isNewPasswordCreated: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nexport type RestorePasswordActionsType =\r\n\r\n    | ReturnType<typeof setShowEmailCheck>\r\n    | ReturnType<typeof setRestorePasswordError>\r\n    | ReturnType<typeof setIsNewPasswordCreated>\r\n    | ReturnType<typeof setRestorePasswordLoading>\r\n\r\n//actions\r\n\r\nexport const setShowEmailCheck = (showEmailCheck: boolean) => {\r\n    return {\r\n        type: 'cards/restorePassword/setShowEmailCheck',\r\n        payload: {\r\n            showEmailCheck\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setRestorePasswordError = (error: string | null) => {\r\n    return {\r\n        type: 'cards/restorePassword/setError',\r\n        payload: {\r\n            error\r\n        }\r\n    } as const\r\n}\r\nconst setIsNewPasswordCreated = (isNewPasswordCreated: boolean) => {\r\n    return {\r\n        type: 'cards/restorePassword/setIsNewPasswordCreated',\r\n        payload: {\r\n            isNewPasswordCreated\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setRestorePasswordLoading = (isFetching: boolean) => {\r\n    return {\r\n        type: 'cards/restorePassword/setRestorePasswordLoading',\r\n        payload: {\r\n            isFetching\r\n        }\r\n    } as const\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    showEmailCheck: false,\r\n    error: null,\r\n    isNewPasswordCreated: false,\r\n    isFetching: false\r\n}\r\n\r\nexport const restorePasswordReducer = (state: InitialStateType = initialState, action: RestorePasswordActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/restorePassword/setShowEmailCheck\":\r\n        case \"cards/restorePassword/setError\":\r\n        case \"cards/restorePassword/setIsNewPasswordCreated\":\r\n        case 'cards/restorePassword/setRestorePasswordLoading':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//thunk\r\n\r\nexport const restorePassword = (email: string): AppThunkType => (dispatch) => {\r\n    dispatch(setRestorePasswordLoading(true))\r\n    authApi.restorePassword(email)\r\n        .then(res => {\r\n            dispatch(setShowEmailCheck(true))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ?\r\n                err.response.data.error\r\n                :\r\n                (err.message + ', more details in the console')\r\n            dispatch(setRestorePasswordError(error))\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setRestorePasswordLoading(false))\r\n        })\r\n}\r\n\r\nexport const setNewPassword = (password: string, resetPasswordToken: string): AppThunkType => (dispatch) => {\r\n    dispatch(setRestorePasswordLoading(true))\r\n    authApi.setNewPassword(password, resetPasswordToken)\r\n        .then(res => {\r\n            debugger\r\n            dispatch(setIsNewPasswordCreated(true))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ?\r\n                err.response.data.error\r\n                :\r\n                (err.message + ', more details in the console')\r\n            dispatch(setRestorePasswordError(error))\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setRestorePasswordLoading(false))\r\n        })\r\n}","import axios from 'axios'\r\nimport {CardPackType} from \"../m2-bll/packsReducer\";\r\n\r\n\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const packsApi = {\r\n    getPacks(packName?: string, min?: number, max?: number, sortPacks?: string, page?: number, pageCount?: number, user_id?: string) {\r\n        return axiosInstance.get<PacksResponseType>(\"/cards/pack\", {\r\n            params: {\r\n                packName,\r\n                min,\r\n                max,\r\n                sortPacks,\r\n                page,\r\n                pageCount,\r\n                user_id\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    createNewPack(name: string, isPrivate: boolean = false) {\r\n        return axiosInstance.post<CardPackType>(\"cards/pack\", {\r\n            cardsPack: {\r\n                name,\r\n                isPrivate\r\n            }\r\n        })\r\n    },\r\n    deletePack(packId: string) {\r\n        return axiosInstance.delete<CardPackType>(`cards/pack?id=${packId}`)\r\n    },\r\n    editPack(_id: string, name: string) {\r\n        return axiosInstance.put<CardPackType>(`cards/pack`, {\r\n            cardsPack: {\r\n                _id,\r\n                name\r\n            }\r\n        })\r\n    }\r\n}","import {AppThunkType} from \"./store\";\r\nimport {packsApi, PacksResponseType} from \"../m3-dal/apiPacks\";\r\nimport {\r\n    CardsCountDirectionType,\r\n    UpdatedDirectionType\r\n} from \"../m1-ui/PacksList/TablePacks/TableHeaderPacks/TableHeaderPacks\";\r\n\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n    user_name: string\r\n}\r\n\r\ntype PackRequestParameters = {\r\n    packName: string\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    sortPacks: UpdatedDirectionType | CardsCountDirectionType\r\n    pageCount: number\r\n    page: number\r\n    user_id: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksRequestParameters: PackRequestParameters\r\n    cardPacksTotalCount: number\r\n    isFetching: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    cardPacks: [],\r\n    cardPacksRequestParameters: {\r\n        page: 1,\r\n        pageCount: 6,\r\n        maxCardsCount: 0,\r\n        minCardsCount: 0,\r\n        sortPacks: \"0updated\",\r\n        packName: \"\",\r\n        user_id: \"\"\r\n    },\r\n    cardPacksTotalCount: 0,\r\n    isFetching: false\r\n}\r\n\r\n//actions\r\n\r\nexport const setSearchName = (requestedName: string) =>\r\n    ({type: 'packs/SET-SEARCH-NAME', requestedName} as const)\r\n\r\nexport const setCurrentPage = (requestedPage: number) =>\r\n    ({type: 'packs/SET-CURRENT-PAGE', requestedPage} as const)\r\n\r\nexport const setUpdatedDirection = (direction: UpdatedDirectionType) =>\r\n    ({type: 'packs/SET-UPDATED-DIRECTION', direction} as const)\r\n\r\nexport const setCardsCountDirection = (direction: CardsCountDirectionType) =>\r\n    ({type: 'packs/SET-CARDS-COUNT-DIRECTION', direction} as const)\r\n\r\nconst setDataPacks = (dataPacks: PacksResponseType) =>\r\n    ({type: 'packs/SET-PACKS', dataPacks} as const)\r\n\r\nconst setLoadingPacks = (isFetching: boolean) =>\r\n    ({type: 'packs/SET-LOADING-PACKS', isFetching} as const)\r\n\r\nexport const setUserId = (userId: string) =>\r\n    ({type: 'packs/SET-USER-ID', userId} as const)\r\n\r\nexport const setPageCount = (count: number) =>\r\n    ({type: 'packs/SET-PAGE-COUNT', count} as const)\r\n\r\nexport const setRangeSort = (range: number[]) =>\r\n    ({type: 'packs/SET-RANGE-SORT', range} as const)\r\n\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: PacksActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"packs/SET-PACKS\":\r\n            return {...state, ...action.dataPacks}\r\n        case \"packs/SET-USER-ID\":\r\n            return {...state, cardPacksRequestParameters: {...state.cardPacksRequestParameters, user_id: action.userId}}\r\n        case \"packs/SET-SEARCH-NAME\":\r\n            return {\r\n                ...state,\r\n                cardPacksRequestParameters: {...state.cardPacksRequestParameters, packName: action.requestedName}\r\n            }\r\n        case \"packs/SET-CURRENT-PAGE\":\r\n            return {\r\n                ...state,\r\n                cardPacksRequestParameters: {...state.cardPacksRequestParameters, page: action.requestedPage}\r\n            }\r\n        case \"packs/SET-UPDATED-DIRECTION\":\r\n        case \"packs/SET-CARDS-COUNT-DIRECTION\":\r\n            return {\r\n                ...state,\r\n                cardPacksRequestParameters: {...state.cardPacksRequestParameters, sortPacks: action.direction}\r\n            }\r\n        case \"packs/SET-PAGE-COUNT\":\r\n            return {\r\n                ...state,\r\n                cardPacksRequestParameters: {...state.cardPacksRequestParameters, pageCount: action.count}\r\n            }\r\n        case \"packs/SET-RANGE-SORT\":\r\n            return {\r\n                ...state,\r\n                cardPacksRequestParameters: {\r\n                    ...state.cardPacksRequestParameters,\r\n                    minCardsCount: action.range[0],\r\n                    maxCardsCount: action.range[1]\r\n                }\r\n            }\r\n        case \"packs/SET-LOADING-PACKS\":\r\n            return {...state, isFetching: action.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunks\r\n\r\nexport const getDataPacks = (): AppThunkType => async (dispatch, getState) => {\r\n    try {\r\n\r\n        const {\r\n            packName,\r\n            minCardsCount,\r\n            maxCardsCount,\r\n            sortPacks,\r\n            page,\r\n            pageCount,\r\n            user_id\r\n        } = getState().packs.cardPacksRequestParameters\r\n        dispatch(setLoadingPacks(true))\r\n        const packs = await packsApi.getPacks(packName, minCardsCount, maxCardsCount, sortPacks, page, pageCount, user_id)\r\n        dispatch(setDataPacks(packs))\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n        dispatch(setLoadingPacks(false))\r\n    }\r\n}\r\n\r\nexport const createNewPack = (name: string, isPrivate?: boolean): AppThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(setLoadingPacks(true))\r\n        await packsApi.createNewPack(name, isPrivate)\r\n        dispatch(getDataPacks())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const deletePack = (packId: string): AppThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(setLoadingPacks(true))\r\n        await packsApi.deletePack(packId)\r\n        dispatch(getDataPacks())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const editPack = (packId: string, name: string): AppThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(setLoadingPacks(true))\r\n        await packsApi.editPack(packId, name)\r\n        dispatch(getDataPacks())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport type PacksActionType = ReturnType<typeof setSearchName\r\n    | typeof setDataPacks\r\n    | typeof setLoadingPacks\r\n    | typeof setCurrentPage\r\n    | typeof setUserId\r\n    | typeof setUpdatedDirection\r\n    | typeof setPageCount\r\n    | typeof setRangeSort\r\n    | typeof setCardsCountDirection>","import axios from 'axios'\r\n\r\nexport type CardResponseType = {\r\n    answer: string\r\n    answerImg: string\r\n    answerVideo: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    questionImg: string\r\n    questionVideo: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsResponseType = {\r\n    cards: Array<CardResponseType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsApi = {\r\n    getCards(cardsPack_id?: string, cardQuestion?: string, sortCards?: string, page?: number, pageCount?: number) {\r\n        return axiosInstance.get<CardsResponseType>(\"/cards/card\", {\r\n            params: {\r\n                cardQuestion,\r\n                cardsPack_id,\r\n                sortCards,\r\n                page,\r\n                pageCount,\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    createNewCard(cardsPack_id: string, question: string, answer: string) {\r\n        return axiosInstance.post<CardResponseType>(\"cards/card\", {\r\n            card: {\r\n                cardsPack_id,\r\n                question,\r\n                answer\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return axiosInstance.delete<CardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    editCard(_id: string, question: string, answer: string){\r\n        return axiosInstance.put<CardResponseType>(`cards/card`,{\r\n            card: {\r\n                _id,\r\n                question,\r\n                answer\r\n            }\r\n        })\r\n    }\r\n}","import {AppThunkType} from \"./store\";\r\nimport {CardResponseType, cardsApi, CardsResponseType} from \"../m3-dal/apiCards\";\r\n\r\n\r\ntype InitialStateType = {\r\n    cards: Array<CardResponseType>\r\n    cardsTotalCount: number\r\n    cardsRequestParameters: {\r\n        cardQuestion: string\r\n        sortCards: string\r\n        page: number\r\n        pageCount: number\r\n    }\r\n    cardsPack_id: string\r\n    cardPackName: string\r\n    currentPackUserId: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    cards: [],\r\n    cardsRequestParameters: {\r\n        cardQuestion: \"\",\r\n        sortCards: \"\",\r\n        page: 1,\r\n        pageCount: 6\r\n    },\r\n    cardsTotalCount: 0,\r\n    cardsPack_id: \"\",\r\n    cardPackName: \"\",\r\n    currentPackUserId: \"\"\r\n}\r\n\r\n// //actions\r\n//\r\n// export const setSearchName = (requestedName: string) =>\r\n//     ({type: 'packs/SET-SEARCH-NAME', requestedName} as const)\r\n//\r\n// export const setCurrentPage = (requestedPage: number) =>\r\n//     ({type: 'packs/SET-CURRENT-PAGE', requestedPage} as const)\r\n//\r\n// export const setUpdatedDirection = (direction: UpdatedDirectionType) =>\r\n//     ({type: 'packs/SET-UPDATED-DIRECTION', direction} as const)\r\n//\r\n// export const setCardsCountDirection = (direction: CardsCountDirectionType) =>\r\n//     ({type: 'packs/SET-CARDS-COUNT-DIRECTION', direction} as const)\r\n//\r\n\r\nexport const setSearchName = (requestedName: string) =>\r\n    ({type: 'cards/SET-SEARCH-NAME', requestedName} as const)\r\n\r\nexport const setDataCards = (dataCards: CardsResponseType) =>\r\n    ({type: 'cards/SET-CARDS', dataCards} as const)\r\n\r\nexport const setPackId = (packId: string) =>\r\n    ({type: 'cards/SET-PACK-ID', packId} as const)\r\n\r\nexport const setCardPackName = (packName: string) =>\r\n    ({type: 'cards/SET-PACK-NAME', packName} as const)\r\n\r\nexport const setCurrentPackUserId = (id: string) =>\r\n    ({type: 'cards/SET-CURRENT-PACK-USER-ID', id} as const)\r\n\r\nexport const setCurrentPage = (requestedPage: number) =>\r\n    ({type: 'cards/SET-CURRENT-PAGE', requestedPage} as const)\r\n\r\nexport const setPageCount = (count: number) =>\r\n    ({type: 'cards/SET-PAGE-COUNT', count} as const)\r\n\r\n// const setLoadingPacks = (isFetching: boolean) =>\r\n//     ({type: 'packs/SET-LOADING-PACKS', isFetching} as const)\r\n//\r\n// export const setUserId = (userId: string) =>\r\n//     ({type: 'packs/SET-USER-ID', userId} as const)\r\n//\r\n// export const setPageCount = (count: number) =>\r\n//     ({type: 'packs/SET-PAGE-COUNT', count} as const)\r\n//\r\n// export const setRangeSort = (range: number[]) =>\r\n//     ({type: 'packs/SET-RANGE-SORT', range} as const)\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/SET-CARDS\":\r\n            return {...state, ...action.dataCards}\r\n        case \"cards/SET-PACK-ID\":\r\n            return {...state, cardsPack_id: action.packId}\r\n        case \"cards/SET-PACK-NAME\":\r\n            return {...state, cardPackName: action.packName}\r\n        case \"cards/SET-CURRENT-PAGE\":\r\n            return {...state, cardsRequestParameters: {...state.cardsRequestParameters, page: action.requestedPage}}\r\n        case \"cards/SET-PAGE-COUNT\":\r\n            return {...state, cardsRequestParameters: {...state.cardsRequestParameters, pageCount: action.count}}\r\n        case \"cards/SET-CURRENT-PACK-USER-ID\":\r\n            return {...state, currentPackUserId: action.id}\r\n        case \"cards/SET-SEARCH-NAME\":\r\n            return {\r\n                ...state,\r\n                cardsRequestParameters: {...state.cardsRequestParameters, cardQuestion: action.requestedName}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunks\r\n\r\nexport const getDataCards = (): AppThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const {\r\n            cardQuestion,\r\n            sortCards,\r\n            page,\r\n            pageCount\r\n        } = getState().cards.cardsRequestParameters\r\n        const cardsPack_id = getState().cards.cardsPack_id\r\n        const cards = await cardsApi.getCards(cardsPack_id, cardQuestion, sortCards, page, pageCount)\r\n        dispatch(setDataCards(cards))\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\nexport const createNewCard = (question: string, answer: string): AppThunkType => async (dispatch, getState) => {\r\n\r\n    const cardsPack_id = getState().cards.cardsPack_id\r\n\r\n    try {\r\n        await cardsApi.createNewCard(cardsPack_id, question, answer)\r\n        dispatch(getDataCards())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const deleteCard = (cardId: string): AppThunkType => async (dispatch) => {\r\n    try {\r\n        await cardsApi.deleteCard(cardId)\r\n        dispatch(getDataCards())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const editCard = (cardId: string, question: string, answer: string): AppThunkType => async (dispatch) => {\r\n    try {\r\n        await cardsApi.editCard(cardId, question, answer)\r\n        dispatch(getDataCards())\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n//\r\nexport type CardsActionType = ReturnType<typeof setDataCards\r\n    | typeof setPackId\r\n    | typeof setCardPackName\r\n    | typeof setCurrentPage\r\n    | typeof setPageCount\r\n    | typeof setCurrentPackUserId\r\n    | typeof setSearchName>","import {applyMiddleware} from \"redux\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AuthActionsType, authReducer} from \"./authReducer\";\r\nimport {ProfileActionsType, profileReducer} from \"./profileReducer\";\r\nimport {RegisterActions, registerReducer} from './registerReducer'\r\nimport {RestorePasswordActionsType, restorePasswordReducer} from \"./restorePasswordReducer\";\r\nimport {PacksActionType, packsReducer} from \"./packsReducer\";\r\nimport {CardsActionType, cardsReducer} from \"./cardsReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    register: registerReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\nexport type AppActionsType = RestorePasswordActionsType | RegisterActions | AuthActionsType | ProfileActionsType | PacksActionType | CardsActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.scss'\r\nimport {debuglog} from \"util\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    error?: Array<string | null>\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e)\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter(e) // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && error.map(err => {\r\n                return <div className={finalSpanClassName}>{err}</div>\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red,\r\n        className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","export default __webpack_public_path__ + \"static/media/eye.109a1739.svg\";","export default __webpack_public_path__ + \"static/media/closedEye.41390b0c.svg\";","import React from \"react\";\r\nimport cls from \"./Preloader.module.scss\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={cls.loader}></div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport cls from './Login.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperInputText from \"../common/SuperInput/SuperInputText\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport eye from '../../../assets/images/eye.svg'\r\nimport {InputTypeType} from \"../NewPassword/NewPassword\";\r\nimport closedEye from \"../../../assets/images/closedEye.svg\";\r\nimport {PATH} from \"../../App\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC, setLoginError} from \"../../m2-bll/authReducer\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching)\r\n\r\n    const [type, setType] = useState<InputTypeType>(\"password\")\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n    const changeTypeHandler = () => {\r\n        type === 'text' ? setType('password') : setType('text')\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={cls.loginContainer}>\r\n            {\r\n                isFetching\r\n                    ?\r\n                    <Preloader/>\r\n                    :\r\n                    <div className={cls.card}>\r\n                        <h2 className={cls.title}>It-incubator</h2>\r\n                        <h3 className={cls.subtitle}>Sign In</h3>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <label>\r\n                                <p className={cls.titleEmail}>Email</p>\r\n                                <div className={cls.inputContainer}>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('email')}\r\n                                        className={cls.inputEmailPassword}\r\n                                        type={\"text\"}\r\n                                        onClick={() => dispatch(setLoginError(null))}\r\n                                        // name={'email'}\r\n                                        // onChange={formik.handleChange}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // value={formik.values.email}\r\n                                    />\r\n                                    {\r\n                                        formik.touched.email &&\r\n                                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> :\r\n                                            <div style={{color: 'red'}}>{error?.match(/user/) ? error : ''}</div>\r\n                                    }\r\n                                </div>\r\n                            </label>\r\n                            <label>\r\n                                <p className={cls.titlePassword}>Password</p>\r\n                                <div className={cls.inputContainer}>\r\n                                    <div className={cls.eye} onClick={changeTypeHandler}><img\r\n                                        src={type === 'password' ? closedEye : eye} alt=\"eye\"/></div>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('password')}\r\n                                        className={cls.inputEmailPassword}\r\n                                        onClick={() => dispatch(setLoginError(null))}\r\n                                        type={type}\r\n                                        // name={'password'}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // onChange={formik.handleChange}\r\n                                        // value={formik.values.password}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password ?\r\n                                        <div style={{color: 'red'}}>{formik.errors.password}</div> :\r\n                                        <div style={{color: 'red'}}>{error?.match(/password/) ? error : ''}</div>\r\n                                    }\r\n                                </div>\r\n                            </label>\r\n                            <div className={cls.checkbox}>\r\n                                <label>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('rememberMe')}\r\n                                        type={'checkbox'}\r\n                                        // name={'rememberMe'}\r\n                                        // onChange={formik.handleChange}\r\n                                        // checked={formik.values.rememberMe}\r\n                                    />\r\n                                    <span className={cls.rememberMe}>Remember me</span>\r\n                                </label>\r\n                            </div>\r\n                            <NavLink to={'/restore_password'} className={cls.restorePassword}>Forgot Password</NavLink>\r\n                            <div className={cls.buttonContainer}>\r\n                                <SuperButton className={cls.button} type={'submit'}><span>Login</span></SuperButton>\r\n                            </div>\r\n                        </form>\r\n                        <p className={cls.newAccount}>Don't have an account</p>\r\n                        <div className={cls.signUp}>\r\n                            <NavLink to={'/registration'}>Sign Up</NavLink>\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/avatar.e5117e8e.png\";","import React from \"react\";\r\nimport cls from \"./UserInfo.module.scss\"\r\nimport defaultAvatar from \"../../../../assets/images/avatar.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserInfoType = {\r\n    avatar?: string\r\n    name: string\r\n}\r\n\r\nexport const UserInfo: React.FC<UserInfoType> = ({avatar, name}) => {\r\n    return (\r\n        <div className={cls.infoUser}>\r\n            <img className={cls.userPhoto} src={avatar ? avatar : defaultAvatar} alt={\"\"}/>\r\n            <p className={cls.userName}>{name}</p>\r\n            <div className={cls.editProfileWrapper}>\r\n                <NavLink to={'/information_about_user'}>Edit\r\n                    profile</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./UserInfoCards.module.scss\";\r\n\r\ntype UserInfoCardsType = {\r\n    publicCardPacksCount: number\r\n}\r\n\r\nexport const UserInfoCards: React.FC<UserInfoCardsType> = ({publicCardPacksCount}) => {\r\n    return (\r\n        <div className={cls.infoUserCards}>\r\n            <p className={cls.userCards}>Number of cards: {publicCardPacksCount}</p>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport cls from './Profile.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {isLoggedInApp} from \"../../m2-bll/authReducer\";\r\nimport {UserInfo} from \"./UserInfo/UserInfo\";\r\nimport {UserInfoCards} from \"./UserInfoCards/UserInfoCards\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error)\r\n\r\n    const avatar = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser.avatar)\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser.name)\r\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(state => state.profile.informationAboutUser.publicCardPacksCount)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n\r\n    useEffect(() => {\r\n        if (!id) {\r\n            dispatch(isLoggedInApp())\r\n        }\r\n    }, [id, dispatch])\r\n\r\n    if (error) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n            <div className={cls.profileContainer}>\r\n                <div className={cls.card}>\r\n                    <div className={cls.info}>\r\n                        <UserInfo avatar={avatar} name={name}/>\r\n                        <UserInfoCards publicCardPacksCount={publicCardPacksCount}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React from 'react'\r\nimport cls from './PageNotFound.module.css'\r\n\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <div className={cls.pageNotFoundContainer}>\r\n            <h1>PageNotFound</h1>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/letter.bc3a4042.svg\";","import React from 'react'\r\nimport cls from './CheckPassword.module.scss'\r\nimport letter from '../../../assets/images/letter.svg'\r\nimport { NavLink } from 'react-router-dom'\r\nimport {PATH} from \"../../App\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setShowEmailCheck} from \"../../m2-bll/restorePasswordReducer\";\r\n\r\ntype CheckPasswordType = {\r\n    email: string\r\n}\r\n\r\nexport const CheckPassword: React.FC<CheckPasswordType> = ({email}) => {\r\n\r\n   const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={cls.checkPasswordContainer}>\r\n            <div className={cls.card}>\r\n                <h2 className={cls.title}>It-incubator</h2>\r\n\r\n                <div className={cls.imgContainer}>\r\n                    <img src={letter} alt=\"\"/>\r\n                </div>\r\n\r\n                <h3 className={cls.subtitle}>Check email</h3>\r\n\r\n                <p className={cls.firstNote}>{`We've sent an Email with instructions to `}<span>{email}</span></p>\r\n                <p className={cls.secondNote}><NavLink to={PATH.LOGIN} onClick={()=>dispatch(setShowEmailCheck(false))}>Try logging in</NavLink> again when you change your password</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport cls from './RestorePassword.module.scss'\r\nimport SuperInputText from \"../common/SuperInput/SuperInputText\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {CheckPassword} from \"../CheckPassword/CheckPassword\";\r\nimport {restorePassword, setRestorePasswordError} from \"../../m2-bll/restorePasswordReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const RestorePassword = () => {\r\n\r\n    const showEmailCheck = useSelector<AppRootStateType, boolean>(state => state.restorePassword.showEmailCheck)\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.restorePassword.error)\r\n\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isFetching)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(restorePassword(values.email))\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={cls.restorePasswordContainer}>\r\n            {\r\n                isFetching\r\n                    ?\r\n                    <Preloader/>\r\n                    :\r\n                    showEmailCheck\r\n                        ?\r\n                        <CheckPassword email={formik.values.email}/>\r\n                        :\r\n                        <div className={cls.card}>\r\n                            <h2 className={cls.title}>It-incubator</h2>\r\n                            <h3 className={cls.subtitle}>Forgot your password?</h3>\r\n                            <form onSubmit={formik.handleSubmit}>\r\n                                <div className={cls.inputContainer}>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('email')}\r\n                                        className={cls.inputEmail}\r\n                                        type={\"text\"}\r\n                                        placeholder={'Email'}\r\n                                        onClick={() => dispatch(setRestorePasswordError(null))}\r\n                                        // name={'email'}\r\n                                        // onChange={formik.handleChange}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // value={formik.values.email}\r\n                                    />\r\n                                    {\r\n                                        formik.touched.email &&\r\n                                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> :\r\n                                            <div style={{color: 'red'}}>{error}</div>\r\n                                    }\r\n                                </div>\r\n                                <p className={cls.firstNote}>Enter your email address and we will send\r\n                                    you further\r\n                                    instructions</p>\r\n                                <div className={cls.buttonContainer}>\r\n                                    <SuperButton className={cls.button}\r\n                                                 type={'submit'}><span>Send Instructions</span></SuperButton>\r\n                                </div>\r\n                            </form>\r\n                            <p className={cls.secondNote}>Did you remember your password?</p>\r\n                            <div className={cls.reLogin}>\r\n                                <NavLink to={'/login'}>Try logging in</NavLink>\r\n                            </div>\r\n                        </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport cls from './NewPassword.module.scss'\r\nimport SuperInputText from \"../common/SuperInput/SuperInputText\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {restorePassword, setNewPassword, setRestorePasswordError} from \"../../m2-bll/restorePasswordReducer\";\r\nimport eye from \"../../../assets/images/eye.svg\";\r\nimport closedEye from \"../../../assets/images/closedEye.svg\";\r\nimport {PATH} from \"../../App\";\r\nimport {useFormik} from \"formik\";\r\nimport {setLoginError} from \"../../m2-bll/authReducer\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\nexport type InputTypeType = \"password\" | \"text\" | \"checkbox\"\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nexport const NewPassword = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [type, setType] = useState<InputTypeType>(\"password\")\r\n\r\n    const isNewPasswordCreated = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isNewPasswordCreated)\r\n\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isFetching)\r\n\r\n    const error = useSelector<AppRootStateType,string | null>(state=>state.restorePassword.error)\r\n\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setNewPassword(values.password, token))\r\n        }\r\n    })\r\n\r\n    const changeTypeHandler = () => {\r\n        type === 'text' ? setType('password') : setType('text')\r\n    }\r\n\r\n    if (isNewPasswordCreated) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={cls.newPasswordContainer}>\r\n            {\r\n                isFetching\r\n                    ?\r\n                    <Preloader/>\r\n                    :\r\n                    <div className={cls.card}>\r\n                        <h2 className={cls.title}>It-incubator</h2>\r\n                        <h3 className={cls.subtitle}>Create new Password</h3>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <div className={cls.inputContainer}>\r\n                                <div className={cls.eye} onClick={changeTypeHandler}><img\r\n                                    src={type === 'password' ? closedEye : eye} alt=\"eye\"/></div>\r\n                                <SuperInputText\r\n                                    {...formik.getFieldProps('password')}\r\n                                    className={cls.inputPassword}\r\n                                    onClick={() => dispatch(setRestorePasswordError(null))}\r\n                                    type={type}\r\n                                    placeholder={'Password'}\r\n                                    // name={'password'}\r\n                                    // onBlur={formik.handleBlur}\r\n                                    // onChange={formik.handleChange}\r\n                                    // value={formik.values.password}\r\n                                />\r\n                                {formik.touched.password && formik.errors.password ?\r\n                                    <div style={{color: 'red'}}>{formik.errors.password}</div> : <div style={{color: 'red', margin:'0px 30px'}}>{error}</div>\r\n                                }\r\n                            </div>\r\n                            <p className={cls.note}>Create new password and press the button below</p>\r\n\r\n                            <div className={cls.buttonContainer}>\r\n                                <SuperButton\r\n                                    className={cls.button}\r\n                                    type={'submit'}\r\n                                >\r\n                                    <span>Create</span>\r\n                                </SuperButton>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React from \"react\";\r\nimport cls from './TestComponents.module.css'\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport SuperInputText from \"../common/SuperInput/SuperInputText\";\r\nimport SuperCheckbox from \"../common/SuperCheckbox/SuperCheckbox\";\r\n\r\nexport const TestComponents = () => {\r\n    return (\r\n        <div className={cls.testComponentsContainer}>\r\n            <h1>Common components</h1>\r\n            <div className={cls.componentsContainer}>\r\n                <div>\r\n                    <h2>Button</h2>\r\n                    <SuperButton>\r\n                        Button\r\n                    </SuperButton>\r\n                </div>\r\n                <div>\r\n                    <h2>Input Text</h2>\r\n                    <SuperInputText/>\r\n                </div>\r\n                <div>\r\n                    <h2>CheckBox</h2>\r\n                    <SuperCheckbox/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport cls from './PersonalInfo.module.scss'\r\nimport {editUserProfileTC} from \"../../../m2-bll/profileReducer\";\r\nimport {PATH} from \"../../../App\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport defaultAvatar from '../../../../assets/images/avatar.png'\r\nimport SuperInputText from \"../../common/SuperInput/SuperInputText\";\r\nimport {isLoggedInApp} from \"../../../m2-bll/authReducer\";\r\nimport {Redirect, useHistory} from 'react-router-dom';\r\n\r\n\r\nexport const PersonalInfo: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser.name)\r\n    const avatar = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser.avatar)\r\n\r\n    const history = useHistory()\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error)\r\n\r\n    let [ava, setAva] = useState<string>('')\r\n    let [nickname, setNickname] = useState<string>(name)\r\n\r\n    useEffect(() => {\r\n        if (!id) {\r\n            dispatch(isLoggedInApp())\r\n        }\r\n        setNickname(name)\r\n    }, [id])\r\n\r\n\r\n    const cancelHandler = () => {\r\n        history.push(PATH.PROFILE)\r\n    }\r\n    const saveHandler = () => {\r\n        dispatch(editUserProfileTC(nickname, ava))\r\n        history.push(PATH.PROFILE)\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n            <div className={cls.infoContainer}>\r\n                <div className={cls.card}>\r\n                    <h2 className={cls.title}>Personal Inforamtion</h2>\r\n                    <div className={cls.imgWrapper}>\r\n                        <img src={avatar ? avatar : defaultAvatar} alt='profile_photo'/>\r\n                    </div>\r\n                    <label>\r\n                        <p className={cls.titleEmail}>Nickname</p>\r\n                        <div className={cls.inputContainer}>\r\n                            <SuperInputText\r\n                                className={cls.inputNicknameAvatar}\r\n                                value={nickname}\r\n                                type={\"text\"}\r\n                                onChangeText={setNickname}\r\n                                // error={errorEmail}\r\n                            />\r\n                        </div>\r\n                    </label>\r\n                    <label>\r\n                        <p className={cls.titleEmail}>Avatar</p>\r\n                        <div className={cls.inputContainer}>\r\n                            <SuperInputText\r\n                                className={cls.inputNicknameAvatar}\r\n                                value={ava}\r\n                                type={\"text\"}\r\n                                onChangeText={setAva}\r\n                                // error={errorEmail}\r\n                            />\r\n                        </div>\r\n                    </label>\r\n                    <div className={cls.buttonContainer}>\r\n                        <button\r\n                            className={cls.cancelButton}\r\n                            onClick={cancelHandler}>\r\n                            <span>Cancel</span>\r\n                        </button>\r\n                        <button\r\n                            className={cls.registerButton}\r\n                            onClick={saveHandler}\r\n                        >\r\n                            <span>Save</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport cls from './Register.module.scss'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {register, setRegisterError} from '../../m2-bll/registerReducer'\r\nimport {AppRootStateType} from '../../m2-bll/store'\r\nimport SuperInputText from '../common/SuperInput/SuperInputText'\r\nimport {Redirect} from \"react-router\";\r\nimport eye from \"../../../assets/images/eye.svg\";\r\nimport {InputTypeType} from \"../NewPassword/NewPassword\";\r\nimport closedEye from \"../../../assets/images/closedEye.svg\";\r\nimport {PATH} from \"../../App\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nexport const Register: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must contain from 8 to 15 characters';\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required';\r\n            } else if (values.password.length !== values.confirmPassword.length) {\r\n                errors.confirmPassword = \"Passwords don't match\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(register(values.email, values.password))\r\n        }\r\n    })\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.register.error)\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.register.isFetching)\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.register.isRegistered)\r\n\r\n    const history = useHistory()\r\n\r\n    const [type, setType] = useState<InputTypeType>(\"password\")\r\n\r\n    const cancelHandler = () => {\r\n        history.push(PATH.LOGIN)\r\n    }\r\n\r\n    const changeTypeHandler = () => {\r\n        type === 'text' ? setType('password') : setType('text')\r\n    }\r\n\r\n\r\n    // redirect logic\r\n    if (isRegistered) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={cls.registrationContainer}>\r\n            {\r\n                isFetching\r\n                    ?\r\n                    <Preloader/>\r\n                    :\r\n                    <div className={cls.card}>\r\n                        <h2 className={cls.title}>IT-Incubator</h2>\r\n                        <h3 className={cls.subtitle}>Sign Up</h3>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <label>\r\n                                <p className={cls.titleEmail}>Email</p>\r\n                                <div className={cls.inputContainer}>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('email')}\r\n                                        className={cls.inputEmailPassword}\r\n                                        type={\"text\"}\r\n                                        onClick={() => dispatch(setRegisterError(null))}\r\n                                        // name={'email'}\r\n                                        // onChange={formik.handleChange}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // value={formik.values.email}\r\n                                    />\r\n                                    {\r\n                                        formik.touched.email &&\r\n                                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> :\r\n                                            <div style={{color: 'red'}}>{error}</div>\r\n                                    }\r\n                                </div>\r\n                            </label>\r\n                            <label>\r\n                                <p className={cls.titlePassword}>Password</p>\r\n                                <div className={cls.inputContainer}>\r\n                                    <div className={cls.eye} onClick={changeTypeHandler}><img\r\n                                        src={type === 'password' ? closedEye : eye} alt=\"eye\"/></div>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('password')}\r\n                                        className={cls.inputEmailPassword}\r\n                                        type={type}\r\n                                        // name={'password'}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // onChange={formik.handleChange}\r\n                                        // value={formik.values.password}\r\n                                    />\r\n                                    {formik.touched.password && formik.errors.password ?\r\n                                        <div style={{color: 'red'}}>{formik.errors.password}</div> : null\r\n                                    }\r\n                                </div>\r\n                            </label>\r\n                            <label>\r\n                                <p className={cls.titlePassword}>Confirm Password</p>\r\n                                <div className={cls.inputContainer}>\r\n                                    <div className={cls.eye} onClick={changeTypeHandler}><img\r\n                                        src={type === 'password' ? closedEye : eye} alt=\"eye\"/></div>\r\n                                    <SuperInputText\r\n                                        {...formik.getFieldProps('confirmPassword')}\r\n                                        className={cls.inputEmailPassword}\r\n                                        type={type}\r\n                                        // name={'confirmPassword'}\r\n                                        // onBlur={formik.handleBlur}\r\n                                        // onChange={formik.handleChange}\r\n                                        // value={formik.values.confirmPassword}\r\n                                    />\r\n                                    {formik.touched.confirmPassword && formik.errors.confirmPassword ?\r\n                                        <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div> : null}\r\n                                </div>\r\n                            </label>\r\n\r\n                            <div className={cls.buttonContainer}>\r\n                                <button\r\n                                    className={cls.cancelButton}\r\n                                    onClick={cancelHandler}>\r\n                                    <span>Cancel</span>\r\n                                </button>\r\n                                <button type={\"submit\"}\r\n                                        className={cls.registerButton}\r\n                                >\r\n                                    <span>Register</span>\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {NavLink, useLocation} from \"react-router-dom\";\r\nimport cls from \"./HeaderMain.module.scss\"\r\nimport {PATH} from \"../../App\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {logoutTC} from \"../../m2-bll/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const HeaderMain = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [finalClass, setFinalClass] = useState(cls.active)\r\n\r\n    let location = useLocation()\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={cls.headerContainer}>\r\n            <div className={cls.wrapper}>\r\n                <h1 className={cls.logo}>It-incubator</h1>\r\n                <div className={cls.linksContainer}>\r\n                    <div className={cls.linkContainer}>\r\n                        <NavLink to={PATH.PACKS_LIST}\r\n                                 className={location.pathname === PATH.PACKS_LIST ? finalClass : \"\"}\r\n                                 onMouseEnter={() => setFinalClass(\"\")}\r\n                                 onMouseOut={() => setFinalClass(cls.active)}\r\n                                 tabIndex={1}>Packs\r\n                            list</NavLink>\r\n                    </div>\r\n                    <div className={cls.linkContainer}>\r\n                        <NavLink to={PATH.PROFILE} tabIndex={2}\r\n                                 className={location.pathname === PATH.PROFILE ? finalClass : \"\"}\r\n                                 onMouseEnter={() => setFinalClass(\"\")}\r\n                                 onMouseOut={() => setFinalClass(cls.active)}\r\n                        >Profile</NavLink>\r\n                    </div>\r\n                </div>\r\n                <div className={cls.buttonContainer}>\r\n                    <SuperButton onClick={onClickHandler} className={cls.logoutBtn}><span>Logout</span></SuperButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/DownSort.f30a3c93.svg\";","export default __webpack_public_path__ + \"static/media/UpSort.f8b45093.svg\";","import React, {useState} from \"react\";\r\nimport cls from \"./TableHeaderPacks.module.scss\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCardsCountDirection, setUpdatedDirection} from \"../../../../m2-bll/packsReducer\";\r\nimport downArrow from \"../../../../../assets/images/DownSort.svg\"\r\nimport upArrow from \"../../../../../assets/images/UpSort.svg\"\r\n\r\n\r\ntype TableHeaderType = {\r\n    className: string\r\n}\r\ntype ArrowType = \"down\" | \"up\"\r\n\r\nexport type UpdatedDirectionType = \"0updated\" | \"1updated\"\r\n\r\nexport type CardsCountDirectionType = \"0cardsCount\" | \"1cardsCount\"\r\n\r\nexport const TableHeaderPacks: React.FC<TableHeaderType> = ({className}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [cardsArrow, setCardsArrow] = useState<ArrowType>('down')\r\n    const [updatedArrow, setUpdatedArrow] = useState<ArrowType>('down')\r\n\r\n    const changeUpdatedDirection = () => {\r\n        setUpdatedArrow(updatedArrow === \"down\" ? \"up\" : \"down\")\r\n        switch (updatedArrow) {\r\n            case \"down\":\r\n                dispatch(setUpdatedDirection(\"1updated\"))\r\n                break\r\n            case \"up\":\r\n                dispatch(setUpdatedDirection(\"0updated\"))\r\n                break\r\n        }\r\n    }\r\n\r\n    const changeCardsCountDirection = () => {\r\n        setCardsArrow(cardsArrow === \"down\" ? \"up\" : \"down\")\r\n        switch (cardsArrow) {\r\n            case \"down\":\r\n                dispatch(setCardsCountDirection(\"1cardsCount\"))\r\n                break\r\n            case \"up\":\r\n                dispatch(setCardsCountDirection(\"0cardsCount\"))\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} ${cls.tableHeader}`}>\r\n            <div>Name</div>\r\n            <div>Cards <span onClick={changeCardsCountDirection}>\r\n                <img src={cardsArrow === \"down\" ? downArrow : upArrow} alt=\"\"/>\r\n            </span></div>\r\n            <div>Last Updated <span onClick={changeUpdatedDirection}>\r\n                <img src={updatedArrow === \"down\" ? downArrow : upArrow} alt=\"\"/>\r\n            </span></div>\r\n            <div>Created by</div>\r\n            <div>Actions</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./TableDataPacks.module.scss\"\r\nimport SuperButton from \"../../../common/SuperButton/SuperButton\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCardPackName, setCurrentPackUserId, setSearchName} from \"../../../../m2-bll/cardsReducer\";\r\n\r\ntype TableDataPropsType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    updatedDate: string\r\n    updatedTime: string\r\n    removePack: (packId: string) => void\r\n    appUserId: string\r\n    createdBy: string\r\n    editPackHandler: (packId: string) => void\r\n}\r\n\r\n\r\nexport const TableDataPacks: React.FC<TableDataPropsType> = ({\r\n                                                                 name,\r\n                                                                 _id,\r\n                                                                 cardsCount,\r\n                                                                 updatedDate,\r\n                                                                 updatedTime,\r\n                                                                 removePack,\r\n                                                                 appUserId,\r\n                                                                 user_id,\r\n                                                                 createdBy,\r\n                                                                 editPackHandler,\r\n                                                                 children\r\n                                                             }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onPackClickHandler = () => {\r\n        dispatch(setCardPackName(name))\r\n        dispatch(setCurrentPackUserId(user_id))\r\n        dispatch(setSearchName(''))\r\n    }\r\n\r\n    return (\r\n        <div className={cls.tableData}>\r\n            <NavLink to={`/cardslist/${_id}`} onClick={onPackClickHandler}>\r\n                <div>{name}</div>\r\n            </NavLink>\r\n            <div>{cardsCount}</div>\r\n            <div>\r\n                <p>Date: {updatedDate}</p>\r\n                <p>Time: {updatedTime}</p>\r\n            </div>\r\n            <div>{createdBy}</div>\r\n            <div className={cls.buttonsContainer}>\r\n                <SuperButton className={cls.deleteButton}\r\n                             onClick={() => removePack(_id)}\r\n                             disabled={user_id !== appUserId}\r\n                ><span>Delete</span></SuperButton>\r\n                <SuperButton className={cls.editButton}\r\n                             onClick={() => editPackHandler(_id)}\r\n                             disabled={user_id !== appUserId}\r\n                ><span>Edit</span></SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./TablePacks.module.scss\"\r\nimport {TableHeaderPacks} from \"./TableHeaderPacks/TableHeaderPacks\";\r\nimport {TableDataPacks} from \"./TableDataPacks/TableDataPacks\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {CardPackType} from \"../../../m2-bll/packsReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\n\r\ntype TablePacksPropsType = {\r\n    removePack: (packId: string) => void\r\n    editPackHandler: (packId: string) => void\r\n}\r\n\r\nexport const TablePacks: React.FC<TablePacksPropsType> = ({removePack, editPackHandler}) => {\r\n\r\n\r\n    const packsData = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs.cardPacks)\r\n    const appUserId = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n    const isFetchingPacks = useSelector<AppRootStateType, boolean>(state => state.packs.isFetching)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n\r\n    return (\r\n        <div className={cls.tableContainer}>\r\n            <TableHeaderPacks className={cls.tableHeader}/>\r\n            {\r\n                isFetchingPacks\r\n                    ?\r\n                    <Preloader/>\r\n                    :\r\n                    cardPacksTotalCount !== 0\r\n                        ?\r\n                        packsData.map(pack => {\r\n\r\n                            const updatedDate = pack.updated.slice(0, 10)\r\n                            const updatedTime = pack.updated.slice(11, 19)\r\n\r\n                            return (\r\n                                <TableDataPacks\r\n                                    name={pack.name}\r\n                                    _id={pack._id}\r\n                                    cardsCount={pack.cardsCount}\r\n                                    createdBy={pack.user_name}\r\n                                    updatedDate={updatedDate}\r\n                                    updatedTime={updatedTime}\r\n                                    user_id={pack.user_id}\r\n                                    key={pack._id}\r\n                                    removePack={removePack}\r\n                                    editPackHandler={editPackHandler}\r\n                                    appUserId={appUserId}\r\n                                />\r\n                            )\r\n                        })\r\n                        :\r\n                        <p className={cls.noPacksTitle}>You don't have any packs. Please create a new one</p>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {KeyboardEvent, useState} from 'react'\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\n\r\ntype SearchPropsType = {\r\n    className: string\r\n    handlePressSearch: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst Search: React.FC<SearchPropsType> = ({className, handlePressSearch}) => {\r\n\r\n    const [request, setRequest] = useState<string>(\"\")\r\n\r\n    return (\r\n        <SuperInputText\r\n            value={request}\r\n            type={\"text\"}\r\n            onChangeText={setRequest}\r\n            onEnter={handlePressSearch}\r\n            placeholder={\"Search...\"}\r\n            className={className}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport 'rc-slider/assets/index.css'\r\n\r\nconst Slider = require('rc-slider')\r\nconst createSliderWithTooltip = Slider.createSliderWithTooltip\r\nconst Range = createSliderWithTooltip(Slider.Range)\r\n\r\ntype SuperDoubleRangePropsType = {\r\n  onChangeRange?: (value: [number, number]) => void\r\n  onAfterChange?: () => void\r\n  value?: [number, number]\r\n  min: number\r\n  max: number\r\n  step: number | null\r\n  included?: boolean\r\n  handleStyle?: Object[]\r\n  trackStyle?: Object[]\r\n  railStyle?: Object\r\n  dotStyle?: Object\r\n  activeDotStyle?: Object\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n  {\r\n    onChangeRange,\r\n    onAfterChange,\r\n    value,\r\n    min,\r\n    max,\r\n    step,\r\n    included,\r\n    handleStyle,\r\n    trackStyle,\r\n    railStyle,\r\n    dotStyle,\r\n    activeDotStyle,\r\n  }) => {\r\n  \r\n  return (\r\n    <>\r\n      <Range\r\n        onChange={onChangeRange}\r\n        onAfterChange={onAfterChange}\r\n        value={value}\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n        included={included}\r\n        handleStyle={handleStyle}\r\n        trackStyle={trackStyle}\r\n        railStyle={railStyle}\r\n        dotStyle={dotStyle}\r\n        activeDotStyle={activeDotStyle}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SuperDoubleRange\r\n","import React, { useState } from 'react'\r\nimport SuperDoubleRange from '../../common/SuperDoubleRange/SuperDoubleRange'\r\nimport styles from './DoubleRange.module.scss'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setRangeSort } from '../../../m2-bll/packsReducer'\r\n\r\nexport const DoubleRange = () => {\r\n  const dispatch = useDispatch()\r\n  const [min, setMin] = useState(0)\r\n  const [max, setMax] = useState(100)\r\n  \r\n  const onChangeRange = (value: [number, number]) => {\r\n    if (min <= max) setMin(value[0])\r\n    if (max >= min) setMax(value[1])\r\n  }\r\n  const handleRange = () => {\r\n    dispatch(setRangeSort([min, max]))\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <SuperDoubleRange\r\n        value={[min, max]}\r\n        min={0}\r\n        max={100}\r\n        step={1}\r\n        included={true}\r\n        onChangeRange={onChangeRange}\r\n        onAfterChange={handleRange}\r\n        handleStyle={[{borderColor: '#21268F', backgroundColor: '#21268F'}]}\r\n        trackStyle={[{width: '20px', backgroundColor: '#21268F'}]}\r\n        railStyle={{backgroundColor: 'grey'}}\r\n        dotStyle={{backgroundColor: 'red'}}\r\n        activeDotStyle={{borderColor: 'green'}}\r\n      />\r\n      <div className={styles.rangeContainer}>\r\n        <span>{min}</span>\r\n        <span>{max}</span>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, { SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent } from 'react'\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n  options?: any[]\r\n  onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n  {\r\n    options,\r\n    onChange, onChangeOption,\r\n    ...restProps\r\n  }\r\n) => {\r\n  const mappedOptions: any[] = options ? options.map((o,i) =>\r\n    <option key={o + '-' + i}>{o}</option>) : [] // map options with key\r\n  \r\n  const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    onChangeOption && onChangeOption(e.currentTarget.value)\r\n    onChange && onChange(e)\r\n  }\r\n  \r\n  return (\r\n    <select onChange={onChangeCallback} {...restProps}>\r\n      {mappedOptions}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default SuperSelect\r\n","import React from 'react'\r\nimport styles from './Paginator.module.scss'\r\nimport ReactPaginate from 'react-paginate'\r\nimport SuperSelect from '../SuperSelect/SuperSelect'\r\n\r\ntype PaginatorPropsType = {\r\n    pageCount: number\r\n    itemsTotalCount: number\r\n    onPageChanges: (page: number) => void\r\n    changePageCount: (count: number) => void\r\n}\r\n\r\n\r\nconst Paginator = ({pageCount, itemsTotalCount, changePageCount, onPageChanges}: PaginatorPropsType) => {\r\n\r\n    return <div className={styles.paginatorPage}>\r\n        <ReactPaginate\r\n            pageCount={Math.ceil(itemsTotalCount / pageCount)}\r\n            marginPagesDisplayed={1}\r\n            pageRangeDisplayed={5}\r\n            previousLabel={'<'}\r\n            previousClassName={styles.prev}\r\n            nextLabel={'>'}\r\n            nextClassName={styles.next}\r\n            activeClassName={styles.selectedPage}\r\n            onPageChange={(page) => onPageChanges(page.selected)}\r\n            containerClassName={styles.container}\r\n            pageClassName={styles.page}\r\n        />\r\n        <div className={styles.sortContainer}>\r\n            Show<SuperSelect\r\n            className={styles.superSelect}\r\n            options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\r\n            value={pageCount}\r\n            onChange={(e) => changePageCount(+e.currentTarget.value)}\r\n        /> Cards per Page\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Paginator","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport cls from \"./PacksList.module.scss\"\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {TablePacks} from \"./TablePacks/TablePacks\";\r\nimport Search from \"../common/Search/Search\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    createNewPack,\r\n    deletePack, editPack,\r\n    getDataPacks,\r\n    setCurrentPage,\r\n    setPageCount,\r\n    setSearchName,\r\n    setUserId\r\n} from \"../../m2-bll/packsReducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {isLoggedInApp} from \"../../m2-bll/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\nimport {DoubleRange} from \"./DoubleRange/DoubleRange\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {CardsCountDirectionType, UpdatedDirectionType} from \"./TablePacks/TableHeaderPacks/TableHeaderPacks\";\r\n\r\ntype ButtonNameType = 'my' | 'all'\r\n\r\nexport const PacksList = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const page = useSelector<AppRootStateType, number>(state => state.packs.cardPacksRequestParameters.page)\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksRequestParameters.pageCount)\r\n    const packName = useSelector<AppRootStateType, string>(state => state.packs.cardPacksRequestParameters.packName)\r\n    const updatedDirection = useSelector<AppRootStateType, UpdatedDirectionType | CardsCountDirectionType>(state => state.packs.cardPacksRequestParameters.sortPacks)\r\n    const currentUserId = useSelector<AppRootStateType, string>(state => state.packs.cardPacksRequestParameters.user_id)\r\n    const minCards = useSelector<AppRootStateType, number>(state => state.packs.cardPacksRequestParameters.minCardsCount)\r\n    const maxCards = useSelector<AppRootStateType, number>(state => state.packs.cardPacksRequestParameters.maxCardsCount)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const isFetchingPacks = useSelector<AppRootStateType, boolean>(state => state.packs.isFetching)\r\n\r\n\r\n    const [activeClass, setActiveClass] = useState(cls.active)\r\n    const [buttonName, setButtonName] = useState<ButtonNameType>('all')\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            if (!error) dispatch(isLoggedInApp())\r\n        } else {\r\n            dispatch(getDataPacks())\r\n        }\r\n    }, [isLoggedIn, dispatch, page, pageCount, packName, currentUserId, updatedDirection, minCards, maxCards])\r\n\r\n\r\n    const addPack = useCallback(() => {\r\n        const newPackName = prompt('Enter the name of the new pack: ')\r\n        if (newPackName)\r\n            dispatch(createNewPack(newPackName))\r\n    }, [dispatch])\r\n\r\n    const editPackHandler = useCallback((packId: string) => {\r\n        const newPackName = prompt('Enter the name of the new pack: ')\r\n        if (newPackName)\r\n            dispatch(editPack(packId, newPackName))\r\n    }, [dispatch])\r\n\r\n\r\n    const removePack = useCallback((packId: string) => {\r\n        dispatch(deletePack(packId))\r\n    }, [dispatch])\r\n\r\n\r\n    const getMyPacksList = useCallback(() => {\r\n        setButtonName('my')\r\n        dispatch(setUserId(id))\r\n    }, [id, dispatch])\r\n\r\n    const getAllPacksList = useCallback(() => {\r\n        setButtonName('all')\r\n        dispatch(setUserId(\"\"))\r\n    }, [dispatch])\r\n\r\n    const onPacksPageChanges = useCallback((page: number) => {\r\n        dispatch(setCurrentPage(page + 1))\r\n    }, [dispatch])\r\n\r\n    const changePacksPageCount = useCallback((count: number) => {\r\n        dispatch(setPageCount(count))\r\n    }, [dispatch])\r\n\r\n    const handlePressSearch = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        dispatch(setSearchName(e.currentTarget.value))\r\n        e.currentTarget.blur()\r\n    }, [dispatch])\r\n\r\n\r\n    if (error) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cls.packlistContainer}>\r\n            <div className={cls.card}>\r\n                <div className={cls.info}>\r\n                    <p className={cls.ownerTitle}>Show packs cards</p>\r\n                    <div className={cls.buttonsContainer}>\r\n                        <SuperButton\r\n                            className={buttonName === 'my' ? `${cls.myButton} ${activeClass}` : cls.myButton}\r\n                            onClick={getMyPacksList}\r\n                            onMouseEnter={() => setActiveClass(\"\")}\r\n                            onMouseOut={() => setActiveClass(cls.active)}\r\n                        >My</SuperButton>\r\n                        <SuperButton\r\n                            className={buttonName === \"all\" ? `${cls.allButton} ${activeClass}` : cls.allButton}\r\n                            onClick={getAllPacksList}\r\n                            onMouseEnter={() => setActiveClass(\"\")}\r\n                            onMouseOut={() => setActiveClass(cls.active)}\r\n                        >All</SuperButton>\r\n                    </div>\r\n                    <p className={cls.numberTitle}>Number of cards</p>\r\n                    <DoubleRange/>\r\n                </div>\r\n                <div className={cls.packslist}>\r\n                    <h2 className={cls.packslistTitle}>Packs list</h2>\r\n                    <div className={cls.search_AddButtonContainer}>\r\n                        <Search className={cls.search} handlePressSearch={handlePressSearch}/>\r\n                        <div className={cls.addButtonContainer}>\r\n                            <SuperButton className={cls.addPackButton}\r\n                                         onClick={addPack}><span>Add new pack</span></SuperButton>\r\n                        </div>\r\n                    </div>\r\n                    <TablePacks\r\n                        removePack={removePack}\r\n                        editPackHandler={editPackHandler}\r\n                    />\r\n                    {!!cardPacksTotalCount && <Paginator\r\n                        pageCount={pageCount}\r\n                        itemsTotalCount={cardPacksTotalCount}\r\n                        onPageChanges={onPacksPageChanges}\r\n                        changePageCount={changePacksPageCount}\r\n                    />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./TableHeaderCards.module.scss\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/store\";\r\n\r\n\r\ntype TableHeaderType = {\r\n    className: string\r\n}\r\n// type ArrowType = \"down\" | \"up\"\r\n//\r\n// export type UpdatedDirectionType = \"0updated\" | \"1updated\"\r\n//\r\n// export type CardsCountDirectionType = \"0cardsCount\" | \"1cardsCount\"\r\n\r\nexport const TableHeaderCards: React.FC<TableHeaderType> = ({className}) => {\r\n\r\n    const appUserId = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n    const currentPackUserId = useSelector<AppRootStateType, string>(state => state.cards.currentPackUserId)\r\n\r\n    // const dispatch = useDispatch()\r\n    //\r\n    // const [cardsArrow, setCardsArrow] = useState<ArrowType>('down')\r\n    // const [updatedArrow, setUpdatedArrow] = useState<ArrowType>('down')\r\n    //\r\n    // const changeUpdatedDirection = () => {\r\n    //     setUpdatedArrow(updatedArrow === \"down\" ? \"up\" : \"down\")\r\n    //     switch (updatedArrow) {\r\n    //         case \"down\":\r\n    //             dispatch(setUpdatedDirection(\"1updated\"))\r\n    //             break\r\n    //         case \"up\":\r\n    //             dispatch(setUpdatedDirection(\"0updated\"))\r\n    //             break\r\n    //     }\r\n    // }\r\n    //\r\n    // const changeCardsCountDirection = () => {\r\n    //     setCardsArrow(cardsArrow === \"down\" ? \"up\" : \"down\")\r\n    //     switch (cardsArrow) {\r\n    //         case \"down\":\r\n    //             dispatch(setCardsCountDirection(\"1cardsCount\"))\r\n    //             break\r\n    //         case \"up\":\r\n    //             dispatch(setCardsCountDirection(\"0cardsCount\"))\r\n    //             break\r\n    //     }\r\n    // }\r\n\r\n    const gridChangeClass = appUserId === currentPackUserId ? cls.gridChangeClass : \"\"\r\n\r\n    return (\r\n        <div className={`${className} ${cls.tableHeader} ${gridChangeClass}`}>\r\n            <div>Question</div>\r\n            <div>Answer</div>\r\n            <div>Last Updated</div>\r\n            <div>Grade</div>\r\n            {appUserId === currentPackUserId && <div>Actions</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./TableDataCards.module.scss\"\r\nimport SuperButton from \"../../../common/SuperButton/SuperButton\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../m2-bll/store\";\r\n\r\ntype TableDataCardsPropsType = {\r\n    question: string\r\n    answer: string\r\n    updatedDate: string\r\n    updatedTime: string\r\n    grade: number\r\n    removeCard: (cardId: string) => void\r\n    editCardHandler: (cardId: string) => void\r\n    card_id: string\r\n}\r\n\r\n\r\nexport const TableDataCards: React.FC<TableDataCardsPropsType> = ({\r\n                                                                      question,\r\n                                                                      answer,\r\n                                                                      updatedDate,\r\n                                                                      updatedTime,\r\n                                                                      grade,\r\n                                                                      removeCard,\r\n                                                                      card_id,\r\n                                                                      editCardHandler,\r\n                                                                      children\r\n                                                                  }) => {\r\n\r\n\r\n    const appUserId = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n    const currentPackUserId = useSelector<AppRootStateType, string>(state => state.cards.currentPackUserId)\r\n\r\n    const gridChangeClass = appUserId === currentPackUserId ? cls.gridChangeClass : \"\"\r\n\r\n    return (\r\n        <div className={`${cls.tableData} ${gridChangeClass}`}>\r\n            <div>{question}</div>\r\n            <div>{answer}</div>\r\n            <div>\r\n                <p>Date: {updatedDate}</p>\r\n                <p>Time: {updatedTime}</p>\r\n            </div>\r\n            <div>{grade}</div>\r\n\r\n            {\r\n                appUserId === currentPackUserId\r\n                &&\r\n                <div className={cls.buttonsContainer}>\r\n                    <SuperButton\r\n                        onClick={() => removeCard(card_id)}\r\n                        className={cls.deleteButton}\r\n                    ><span>Delete</span></SuperButton>\r\n                    <SuperButton\r\n                        onClick={() => editCardHandler(card_id)}\r\n                        className={cls.editButton}\r\n                    ><span>Edit</span></SuperButton>\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport cls from \"./TableCards.module.scss\"\r\nimport {TableHeaderCards} from \"./TableHeaderCards/TableHeaderCards\";\r\nimport {TableDataCards} from \"./TableDataCards/TableDataCards\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {CardResponseType} from \"../../../m3-dal/apiCards\";\r\n\r\ntype TableCardsPropsType = {\r\n    removeCard: (cardId: string) => void\r\n    editCardHandler: (cardId: string) => void\r\n}\r\n\r\nexport const TableCards: React.FC<TableCardsPropsType> = ({removeCard, editCardHandler}) => {\r\n\r\n    const cardsData = useSelector<AppRootStateType, Array<CardResponseType>>(state => state.cards.cards)\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n\r\n    return (\r\n        <div className={cls.tableContainer}>\r\n            <TableHeaderCards className={cls.tableHeader}/>\r\n            {\r\n                cardsTotalCount !== 0\r\n                    ?\r\n                    cardsData.map(card => {\r\n\r\n                        const updatedDate = card.updated.slice(0, 10)\r\n                        const updatedTime = card.updated.slice(11, 19)\r\n\r\n                        return (\r\n\r\n                            <TableDataCards\r\n                                key={card._id}\r\n                                card_id={card._id}\r\n                                question={card.question}\r\n                                answer={card.answer}\r\n                                updatedDate={updatedDate}\r\n                                updatedTime={updatedTime}\r\n                                grade={card.grade}\r\n                                removeCard={removeCard}\r\n                                editCardHandler={editCardHandler}\r\n                            />\r\n                        )\r\n                    })\r\n                    :\r\n                    <p className={cls.noCardsTitle}>This pack is empty. Click add new card to fill this pack</p>\r\n            }\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/LeftArrow.54207b29.svg\";","import React, {KeyboardEvent, useCallback, useEffect} from \"react\";\r\nimport cls from \"./CardsList.module.scss\"\r\nimport Search from \"../common/Search/Search\";\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {\r\n    createNewCard,\r\n    deleteCard, editCard,\r\n    getDataCards,\r\n    setCurrentPage,\r\n    setPackId,\r\n    setPageCount,\r\n    setSearchName\r\n} from \"../../m2-bll/cardsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TableCards} from \"./TableCards/TableCards\";\r\nimport {PATH} from \"../../App\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport arrow from \"../../../assets/images/LeftArrow.svg\"\r\n\r\nexport const CardsList = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const history = useHistory()\r\n\r\n    const page = useSelector<AppRootStateType, number>(state => state.cards.cardsRequestParameters.page)\r\n    const packName = useSelector<AppRootStateType, string>(state => state.cards.cardPackName)\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.cards.cardsRequestParameters.pageCount)\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const searchQuestion = useSelector<AppRootStateType, string>(state => state.cards.cardsRequestParameters.cardQuestion)\r\n\r\n\r\n    const appUserId = useSelector<AppRootStateType, string>(state => state.profile.informationAboutUser._id)\r\n    const currentPackUserId = useSelector<AppRootStateType, string>(state => state.cards.currentPackUserId)\r\n\r\n    const {packId} = useParams<{ packId: string }>()\r\n\r\n    useEffect(() => {\r\n        dispatch(setPackId(packId))\r\n        dispatch(getDataCards())\r\n    }, [page, pageCount, searchQuestion])\r\n\r\n    const onCardsPageChanges = useCallback((page: number) => {\r\n        dispatch(setCurrentPage(page + 1))\r\n    }, [dispatch])\r\n\r\n    const changeCardsPageCount = useCallback((count: number) => {\r\n        dispatch(setPageCount(count))\r\n    }, [dispatch])\r\n\r\n    const handlePressSearch = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        dispatch(setSearchName(e.currentTarget.value))\r\n        e.currentTarget.blur()\r\n    }, [dispatch])\r\n\r\n    const addCardHandler = useCallback(() => {\r\n        const newCardQuestion = prompt('Enter the question of the new card: ')\r\n        const newCardAnswer = prompt('Enter the answer of the new card: ')\r\n        if (newCardQuestion && newCardAnswer)\r\n            dispatch(createNewCard(newCardQuestion, newCardAnswer))\r\n    }, [dispatch])\r\n\r\n    const editCardHandler = useCallback((cardId: string) => {\r\n        const newCardQuestion = prompt('Enter the question of the card: ')\r\n        const newCardAnswer = prompt('Enter the answer of the card: ')\r\n        if (newCardQuestion && newCardAnswer)\r\n            dispatch(editCard(cardId, newCardQuestion, newCardAnswer))\r\n    }, [dispatch])\r\n\r\n    const removeCard = useCallback((cardId: string) => {\r\n        dispatch(deleteCard(cardId))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={cls.cardslistContainer}>\r\n            <div className={cls.card}>\r\n                <div className={cls.cardslist}>\r\n                    <div className={cls.arrowTitleContainer}><img className={cls.arrow}\r\n                                                                  onClick={() => {\r\n                                                                      history.push(PATH.PACKS_LIST)\r\n                                                                  }}\r\n                                                                  src={arrow}\r\n                                                                  alt={\"\"}\r\n                    /><h2 className={cls.cardslistTitle}>Pack\r\n                        name: <span>{packName}</span></h2></div>\r\n                    <div className={cls.search_AddButtonContainer}>\r\n                        <Search className={cls.search} handlePressSearch={handlePressSearch}/>\r\n                        <div className={cls.addButtonContainer}>\r\n                            {appUserId === currentPackUserId && <SuperButton className={cls.addPackButton}\r\n                                                                             onClick={addCardHandler}><span>Add new card</span></SuperButton>}\r\n                        </div>\r\n                    </div>\r\n                    <TableCards\r\n                        removeCard={removeCard}\r\n                        editCardHandler={editCardHandler}\r\n                    />\r\n                    {!!cardsTotalCount && <Paginator\r\n                        pageCount={pageCount}\r\n                        itemsTotalCount={cardsTotalCount}\r\n                        onPageChanges={onCardsPageChanges}\r\n                        changePageCount={changeCardsPageCount}\r\n                    />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.scss';\r\nimport {Header} from './m1-ui/Header/Header';\r\nimport {Login} from \"./m1-ui/Login/Login\";\r\nimport {Profile} from \"./m1-ui/Profile/Profile\";\r\nimport {PageNotFound} from \"./m1-ui/PageNotFound/PageNotFound\";\r\nimport {RestorePassword} from \"./m1-ui/RestorePassword/RestorePassword\";\r\nimport {NewPassword} from \"./m1-ui/NewPassword/NewPassword\";\r\nimport {TestComponents} from \"./m1-ui/TestComponents/TestComponents\";\r\nimport {PersonalInfo} from \"./m1-ui/Profile/PersonalInfo/PersonalInfo\";\r\nimport {Register} from \"./m1-ui/Registration/Register\";\r\nimport {HeaderMain} from \"./m1-ui/HeaderMain/HeaderMain\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./m2-bll/store\";\r\nimport {PacksList} from \"./m1-ui/PacksList/PacksList\";\r\nimport {Redirect} from \"react-router\";\r\nimport {Preloader} from \"./m1-ui/common/preloader/Preloader\";\r\nimport {CardsList} from \"./m1-ui/CardsList/CardsList\";\r\n\r\nexport const PATH = {\r\n    PROFILE: '/profile',\r\n    PACKS_LIST: '/packslist',\r\n    CARDS_LIST: '/cardslist/:packId?',\r\n    USER_INFO: '/information_about_user',\r\n    LOGIN: '/login',\r\n    REGISTRATION: '/registration',\r\n    TEST_COMPONENTS: '/test_components',\r\n    PAGE_NOT_FOUND: '/404',\r\n    RESTORE_PASSWORD: '/restore_password',\r\n    NEW_PASSWORD: \"/new_password/:token?\"\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.auth.isFetching)\r\n\r\n    return (\r\n        isFetching\r\n            ?\r\n            <Preloader/>\r\n            :\r\n            <div className='app-wrapper'>\r\n                {/*<Header/>*/}\r\n                {isLoggedIn && <HeaderMain/>}\r\n                <div className='app-wrapper-content'>\r\n                    <Route exact path={'/'} render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                    <Route exact path={PATH.LOGIN} render={() => <Login/>}/>\r\n                    <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                    <Route path={PATH.PACKS_LIST} render={() => <PacksList/>}/>\r\n                    <Route path={PATH.CARDS_LIST} render={() => <CardsList/>}/>\r\n                    <Route path={PATH.USER_INFO} render={() => <PersonalInfo/>}/>\r\n                    <Route path={PATH.REGISTRATION} render={() => <Register/>}/>\r\n                    <Route path={PATH.TEST_COMPONENTS} render={() => <TestComponents/>}/>\r\n                    <Route path={PATH.PAGE_NOT_FOUND} render={() => <PageNotFound/>}/>\r\n                    <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePassword/>}/>\r\n                    <Route path={PATH.NEW_PASSWORD}\r\n                           render={() => <NewPassword/>}/> {/* для отображения <NewPassword/> после token стоит \"?\" */}\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\nimport App from \"./n1-main/App\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}